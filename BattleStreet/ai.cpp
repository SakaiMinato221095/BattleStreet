
//================================================
//=
//=	AIの処理[ai.cpp]
//= Author Sakai Minato
//=
//================================================

//=======================================
//=	インクルード
//=======================================

#include "ai.h"

//=======================================
//=	コンスト定義
//=======================================

//=======================================
//=	静的変数宣言
//=======================================
// 
//=================================================
//= AIの基底クラス
//=================================================
//-------------------------------------
//-	コンストラクタ
//-------------------------------------
CAi::CAi()
{

}

//-------------------------------------
//-	デストラクタ
//-------------------------------------
CAi::~CAi()
{

}

//-------------------------------------
//- 初期化処理
//-------------------------------------
HRESULT CAi::Init(void)
{
	// 成功を返す
	return S_OK;
}

//-------------------------------------
//- 終了処理
//-------------------------------------
void CAi::Uninit(void)
{

}

//=================================================
//= ターゲット移動AIのクラス
//=================================================
//-------------------------------------
//-	コンストラクタ
//-------------------------------------
CAiTgtMove::CAiTgtMove()
{
	ZeroMemory(&m_info,sizeof(m_info));
}

//-------------------------------------
//-	デストラクタ
//-------------------------------------
CAiTgtMove::~CAiTgtMove()
{

}

//-------------------------------------
//- 初期化処理
//-------------------------------------
HRESULT CAiTgtMove::Init(D3DXVECTOR3* pPos, D3DXVECTOR3* pRot,D3DXVECTOR3 posTgt)
{
	// 初期情報を設定
	m_info.pPos = pPos;
	m_info.pRot = pRot;
	m_info.posTgt = posTgt;

	// ターゲットに対するベクトルを算出
	m_info.vecTgt.y = atan2f(pPos->x - posTgt.x, pPos->z - posTgt.z);

	// 成功を返す
	return S_OK;
}

//-------------------------------------
//- 終了処理
//-------------------------------------
void CAiTgtMove::Uninit(void)
{

}

//-------------------------------------
//- 更新処理
//-------------------------------------
void CAiTgtMove::Update(void)
{
	*m_info.pPos += D3DXVECTOR3(sinf(m_info.vecTgt.y) * 1.0f, 0.0f, cosf(m_info.vecTgt.y) * 1.0f);
}

//-------------------------------------
//- 生成処理
//-------------------------------------
CAiTgtMove* CAiTgtMove::Create(D3DXVECTOR3* pPos, D3DXVECTOR3* pRot, D3DXVECTOR3 posTgt)
{
	// 生成処理
	CAiTgtMove* pInstance = DBG_NEW CAiTgtMove;

	if (pInstance != nullptr)
	{
		// 初期化処理
		if (FAILED(pInstance->Init(pPos, pRot,posTgt)))
		{// 失敗時

			return nullptr;
		}
	}
	else if (pInstance == nullptr)
	{// 失敗時

		return nullptr;
	}

	// ポインタを返す
	return pInstance;
}
